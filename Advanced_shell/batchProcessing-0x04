""" #!/bin/bash

# List of Pokémon
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output directory
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

fetch_pokemon() {
    local POKEMON=$1
    local OUTPUT_FILE="$OUTPUT_DIR/$POKEMON.json"

    echo "Fetching data for $POKEMON..."
    
    for attempt in {1..3}; do
        if curl --ssl-no-revoke -sL --connect-timeout 10 \
            "https://pokeapi.co/api/v2/pokemon/$POKEMON" \
            -o "$OUTPUT_FILE"; then
            echo "Saved data to $OUTPUT_FILE ✅"
            return
        else
            echo "Attempt $attempt for $POKEMON failed..."
            sleep 1
        fi
    done

    echo "Failed to fetch $POKEMON ❌"
}

# Run all fetches in parallel
for POKEMON in "${POKEMONS[@]}"; do
    fetch_pokemon "$POKEMON" &
done

# Wait for all parallel jobs to finish
wait
echo "All Pokémon data fetched! 🚀"
"""

#!/bin/bash

POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

pids=()

for POKEMON in "${POKEMONS[@]}"; do
    {
        echo "Fetching data for $POKEMON..."
        curl -sL "https://pokeapi.co/api/v2/pokemon/$POKEMON" -o "$OUTPUT_DIR/$POKEMON.json" &&
        echo "Saved $POKEMON ✅" ||
        echo "Failed $POKEMON ❌"
    } &
    pids+=($!)  # store process ID
done

# Wait for all background processes
for pid in "${pids[@]}"; do
    if ! wait "$pid"; then
        echo "Process $pid failed, killing..."
        kill "$pid" 2>/dev/null
    fi
done

echo "All fetches complete."
